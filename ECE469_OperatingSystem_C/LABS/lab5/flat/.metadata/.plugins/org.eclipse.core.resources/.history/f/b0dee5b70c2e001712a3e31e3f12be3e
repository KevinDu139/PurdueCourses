#include "ostraps.h"
#include "dlxos.h"
#include "process.h"
#include "dfs.h"
#include "files.h"
#include "synch.h"

// You have already been told about the most likely places where you should use locks. You may use 
// additional locks if it is really necessary.

static file_descriptor files[DFS_INODE_MAX_NUM];
static lock_t lock;


// STUDENT: put your file-level functions here
void FileDescriptorDelete(int handle){
	bzero(files[handle].filename, FILE_MAX_FILENAME_LENGTH);
	files[handle].inodeHandle = -1;
	files[handle].currentPos = 0;
	files[handle].eof = 0;
	files[handle].mode = 0;
	files[handle].pid = -1;
}


void FileModuleInit(){
	int i;
	for (i = 0;i < DFS_INODE_MAX_NUM;++i){
		FileDescriptorDelete(i);
	}
}


int GetFileMode(char *modeNum){
	if (modeNum[0] == 'r'){
		if (modeNum[1] == 'w'){
			return FILE_MODE_RW;
		}
		return FILE_MODE_R;
	}
	else if (modeNum[0] == 'w'){
		return FILE_MODE_W;
	}
	return FILE_FAIL;
}

int GetInodeFileDescriptor(int inodeHandle){
	int i;
	for (i = 0;i < DFS_INODE_MAX_NUM;++i){
		if (files[i].inodeHandle == inodeHandle){
			return i;
		}
	}
	return FILE_FAIL;
}

int GetFreeFileDescriptor(){
	int i;
	for (i = 0;i < DFS_INODE_MAX_NUM;++i){
		if (files[i].inodeHandle == -1){
			return i;
		}
	}
	return FILE_FAIL;
}

int FileOpen(char *filename, char *mode){
	int modeNum = GetFileMode(mode);
	int inodeHandle;
	int fileHandle = -1;

	if (modeNum == FILE_FAIL)
		return FILE_FAIL;

	// Check whether the file is already opened by other process
	inodeHandle = DfsInodeFilenameExists(filename);
	if (inodeHandle != DFS_FAIL) {
		fileHandle = GetInodeFileDescriptor(inodeHandle);
		if (fileHandle != FILE_FAIL && GetCurrentPid() != files[fileHandle].pid){
			return FILE_FAIL;
		}
	}

	if (LockHandleAcquire(lock) != SYNC_SUCCESS){
		dbprintf('s', "FILE: Lock handle acquire failed before FileOpen.\n");
	}

	if (modeNum != FILE_MODE_R){
		DfsInodeDelete(inodeHandle);
		inodeHandle = DfsInodeOpen(filename);
	}

	if (inodeHandle == DFS_FAIL){
		if (LockHandleRelease(lock) != SYNC_SUCCESS){
			dbprintf('s', "FILE: Lock handle release failed after FileOpen.\n");
		}
		return FILE_FAIL;
	}
	// filehandle was got when cheking pid
	if (fileHandle == FILE_FAIL){
		fileHandle = GetFreeFileDescriptor();
	}
	dstrncpy(files[fileHandle].filename, filename, dstrlen(filename));
	files[fileHandle].inodeHandle = inodehandle;
	files[fileHandle].pid = GetCurrentPid();


	if (LockHandleRelease(lock) != SYNC_SUCCESS){
		dbprintf('s', "FILE: Lock handle release failed after FileOpen.\n");
	}

	return fileHandle;
}

int FileClose(int handle){

	if (GetCurrentPid() != files[handle].pid){
		return FILE_FAIL;
	}

	if (LockHandleAcquire(lock) != SYNC_SUCCESS){
		dbprintf('s', "FILE: Lock handle acquire failed before FileClose.\n");
	}

	FileDescriptorDelete(handle);

	if (LockHandleRelease(lock) != SYNC_SUCCESS){
		dbprintf('s', "FILE: Lock handle release failed after FileClose.\n");
	}
	return FILE_SUCCESS;
}

int FileRead(int handle, void *mem, int num_bytes){
	int bytesRead;

	if (GetCurrentPid() != files[handle].pid){
		return FILE_FAIL;
	}

	bytesRead = DfsInodeReadBytes(files[handle].inodeHandle, mem, files[handle].currentPos, num_bytes);

	if (bytesRead == DFS_FAIL)
		return FILE_FAIL;

	files[handle].currentPos += bytesRead;
	if (bytesRead < num_bytes){
		files[handle].eof = 1;
		return FILE_FAIL;
	}

	return bytesRead;
}

int FileWrite(int handle, void *mem, int num_bytes){
	int bytesWritten;

	if (GetCurrentPid() != files[handle].pid){
		return FILE_FAIL;
	}

	bytesWritten = DfsInodeReadBytes(files[handle].inodeHandle, mem, files[handle].currentPos, num_bytes);

	if (bytesWritten == DFS_FAIL)
		return FILE_FAIL;

	return bytesWritten;
}


int FileSeek(int handle, int num_bytes, int from_where){
	if (GetCurrentPid() != files[handle].pid){
		return FILE_FAIL;
	}

	if (from_where == FILE_SEEK_SET){
		files[handle].currentPos = num_bytes;
	}
	else if (from_where == FILE_SEEK_END){
		files[handle].currentPos = DfsInodeFilesize(files[handle].inodeHanlde) + num_bytes;
	}
	else if (from_where == FILE_SEEK_CUR){
		files[handle].currentPos += num_bytes;
	}
	else{
		return FILE_FAIL;
	}

	if (0 > files[handle].currentPos || files[handle].currentPos > DfsInodeFilesize(files[handle].inodeHanlde))
		return FILE_FAIL;

	files[handle].eof = 0;
	return FILE_SUCCESS;
}


int FileDelete(char *filename){
	int inodeHandle;
	int fileHandle = -1;

	// Check whether the file is already opened by other process
	inodeHandle = DfsInodeFilenameExists(filename);
	if (inodeHanlde != DFS_FAIL){
		fileHandle = GetInodeFileDescriptor(inodeHandle);
		if (fileHandle != FILE_FAIL && GetCurrentPid() != files[fileHandle].pid){
			return FILE_FAIL;
		}
	}
	else{
		return FILE_FAIL;
	}

	if (DfsInodeDelete(inodeHandle) != DFS_SUCCESS){
		return FILE_FAIL;
	}

	if (fileHandle != -1){
		if (LockHandleAcquire(lock) != SYNC_SUCCESS){
			dbprintf('s', "FILE: Lock handle acquire failed before FileDelete.\n");
		}

		FileDescriptorDelete(fileHandle);

		if (LockHandleRelease(lock) != SYNC_SUCCESS){
			dbprintf('s', "FILE: Lock handle release failed after FileDelete.\n");
		}
	}

	return 0;
}
